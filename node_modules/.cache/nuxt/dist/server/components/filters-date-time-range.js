exports.ids = [62];
exports.modules = {

/***/ 73:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@nuxt/webpack/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@nuxt/components/dist/loader.js??ref--0-0!./node_modules/@nuxt/webpack/node_modules/vue-loader/lib??vue-loader-options!./components/filters/DateTimeRange.vue?vue&type=template&id=497a1c03&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._ssrNode("<p><input type=\"date\""+(_vm._ssrAttr("min",_vm.min))+(_vm._ssrAttr("max",_vm.max))+(_vm._ssrAttr("value",(_vm.dateVal)))+"></p>")])}
var staticRenderFns = []


// CONCATENATED MODULE: ./components/filters/DateTimeRange.vue?vue&type=template&id=497a1c03&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/@nuxt/components/dist/loader.js??ref--0-0!./node_modules/@nuxt/webpack/node_modules/vue-loader/lib??vue-loader-options!./components/filters/DateTimeRange.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var DateTimeRangevue_type_script_lang_js_ = ({
  // eslint-disable-next-line vue/require-prop-types
  props: ['trigger', 'sdate', 'min', 'max'],

  data() {
    return {
      myDate: new Date(),
      // note this date is set in UTC (Greenwich time) not your current timezone
      dateVal: this.sdate ? Date.parse(this.sdate) && new Date(new Date(this.sdate).getTime() - new Date(this.sdate).getTimezoneOffset() * 60 * 1000).toISOString().split('T')[0] : new Date() && new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60 * 1000).toISOString().split('T')[0] // UTC (Greenwich time)

    };
  },

  watch: {
    myDate: {
      handler(newVal) {
        this.$emit('DTChange', newVal);
      }

    },
    trigger: {
      handler(newVal) {
        this.$emit('DTChange', this.myDate);
      }

    },
    sdate: {
      handler(newVal) {
        let dt = Date.parse(newVal);
        dt = dt && new Date(new Date(dt).getTime() - new Date(dt).getTimezoneOffset() * 60 * 1000).toISOString().split('T')[0]; // UTC (Greenwich time)

        this.dateVal = dt;
      }

    }
  }
});
// CONCATENATED MODULE: ./components/filters/DateTimeRange.vue?vue&type=script&lang=js&
 /* harmony default export */ var filters_DateTimeRangevue_type_script_lang_js_ = (DateTimeRangevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/@nuxt/webpack/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./components/filters/DateTimeRange.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  filters_DateTimeRangevue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  "0689a086"
  
)

/* harmony default export */ var DateTimeRange = __webpack_exports__["default"] = (component.exports);

/***/ })

};;
//# sourceMappingURL=filters-date-time-range.js.map